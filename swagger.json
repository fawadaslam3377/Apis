{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server homiTag server. ",
    "version": "1.0.0",
    "title": "Swagger HomiTag",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:8080",
  "basePath": "",
  "tags": [
    {
      "name": "Movies",
      "description": "Everything about your Movies"
    },
    {
      "name": "Genres",
      "description": "Services of Genres"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/Movies": {
      "post": {
        "tags": ["Movies"],
        "summary": "Add a new Movies",
        "description": "",
        "operationId": "addMovie",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movies"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["Movies"],
        "summary": "Update an existing Movies",
        "description": "",
        "operationId": "updateMovie",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of movie that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movies"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "movie not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "get": {
        "tags": ["Movies"],
        "summary": "Find all movies",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findMovies",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movies"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/Movies/{Id}": {
      "get": {
        "tags": ["Movies"],
        "summary": "Finds Movie by Id",
        "description": "",
        "operationId": "findbyIdMovie",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Tags to filter by",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movies"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": ["Movies"],
        "summary": "Deletes a Movie",
        "description": "",
        "operationId": "deleteMovie",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/Genre": {
      "post": {
        "tags": ["Genre"],
        "summary": "Add a new Movies",
        "description": "",
        "operationId": "addMovie",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "put": {
        "tags": ["Genre"],
        "summary": "Update an existing Movies",
        "description": "",
        "operationId": "updateMovie",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of movie that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genre"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "movie not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      },
      "get": {
        "tags": ["Genre"],
        "summary": "Find all movies",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findMovies",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movies"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    },
    "/Genre/{Id}": {
      "get": {
        "tags": ["Genre"],
        "summary": "Finds Movie by Id",
        "description": "",
        "operationId": "findbyIdMovie",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Tags to filter by",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movies"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "deprecated": false
      },
      "delete": {
        "tags": ["Genre"],
        "summary": "Deletes a Movie",
        "description": "",
        "operationId": "deleteMovie",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Movies": {
      "type": "object",
      "required": ["name", "name"],
      "properties": {
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "description": {
          "type": "string"
        },
        "rating": {
          "type": "string"
        },
        "releaseDate": {
          "type": "string",
          "example": "12-12-2020"
        },
        "genre": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "Genre": {
      "type": "object",
      "required": ["name", "name"],
      "properties": {
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "description": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
